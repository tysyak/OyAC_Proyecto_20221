 #+TITLE: Proyecto - Organización y Arquitectura de Computadoras
#+author: Castelan Hernandez Mario, Miranda Hernández Alejandro, Romero Andrade Cristian, Sánchez Brito Diego y Solano Morales Isaac Uriel
#+options: toc:nil title:nil
#+language: es
#+latex_compiler: lualatex
#+latex_class: IEEEtran

#+latex_header_extra: \usepackage[backend=biber,style=ieee]{biblatex}
#+latex_header_extra: \addbibresource{./main.bib}

#+begin_titlepage
#+latex: \centering
#+latex: \includegraphics[width=0.25\textwidth]{./img_common/unam_logo}\vspace{0.5cm}\\
#+latex: {\scshape{\Huge Facultad de Ingeniería\par{}}}\vspace{0.25cm}
#+latex: {\scshape{\Large Organización y Arquitectura de Computadoras\par{}}}\vfill{}
#+latex: {\huge \textbf{Proyecto de Organización y Arquitectura de Computadoras}}\vfill{}
#+latex: {\Large Alumnos\\
Castelan Hernandez Mario

Miranda Hernández Alejandro

Romero Andrade Cristian

Sánchez Brito Diego

Solano Morales Isaac Uriel

#+latex: }\vfill{}
#+latex: {\large Grupo: 01\par{}}\vfill{}
#+latex: {\large Profesor\\Ing.~Hugo Enrique Estrada León}\vfill{}
#+latex: \vfil{}
#+latex: {\large Semestre\\\textbf{2022--1}}
#+latex: \vfill{}
#+latex: {\large Fecha de Entrega\\17 de diciembre de 2021}
#+latex: \vfill{}
#+latex: \includegraphics[width=0.1\textwidth]{./img_common/inge_logo}
#+end_titlepage

#+latex: \maketitle
#+latex: \tableofcontents

* Objetivo
El alumno programará las instrucciones necesarias para poder ejecutar un algoritmo sobre una arquitectura de computadora  diseñada por el alumno.
** Algoritmos
Se debe elegir alguno de los algoritmos propuestos e implementar la o las instrucciones necesarias para llevarlo a cabo. Los modos de direccionamiento y la arquitectura son libres de elección.
Si se elige la arquitectura RISC, se tendrá un pontaje extra en la calificación. En
dado caso que para su algoritmo existan riesgos por dependencia de datos, estos
se solucionarían vía software (agregando instrucciones =NOP=) y no por hardware.
** Área de un octágono
Se debe implementar el algoritmo que permita obtener el área de un octágono. Se usará la siguiente formula:
$A = \frac{perimetro \times apotema}{2}$
siendo el $perimetro$ y el $apotema$ números enteros.
* Introducción
** Arquitectura y organización de la computadora
La arquitectura de la computadora hace referencia al conjunto de elementos del computador que son visibles desde el punto de vista del programador de ensamblador.
La organización de la computadora se refiere a las unidades funcionales del computador y al modo como están interconectadas.
** Arquitectura Von Neumann
El objetivo de la arquitectura Von Neumann es construir un sistema flexible que permita resolver diferentes tipos de problemas. Para conseguir esta flexibilidad, se construye un sistema de propósito general que se pueda programar para resolver los diferentes tipos de problemas. Para cada problema concreto se define un programa diferente.
La arquitectura Von Neumann se basa en tres propiedades:
1) Hay un único espacio de memoria de lectura y escritura, que contiene las instrucciones y los datos necesarios.
2) El contenido de la memoria es accesible por posición, independientemente de que se acceda a datos o a instrucciones.
3) La ejecución de las instrucciones se produce de manera secuencial: después de ejecutar una instrucción se ejecuta la instrucción siguiente que hay en la memoria principal, pero se puede romper la secuencia de ejecución utilizando instrucciones de ruptura de secuencia.
** Arquitectura Harvard
La organización del computador según el modelo Harvard, básicamente, se distingue del modelo Von Neumann por la división de la memoria en una memoria de instrucciones y una memoria de datos, de manera que el procesador puede acceder separada y simultáneamente a las dos memorias.
#+caption: Arquitectura Harvard
[[./img/arq_harv.png]]
** RISC: Reduced instruction set computer processor
Es una arquitectura de procesadores basada en una colección de instrucciones simples y altamente personalizadas. RISC se construye para minimizar el tiempo de ejecución de una instrucción, optimizando y limitando el número de instrucciones. La arquitectura RISC tiene la capacidad de por cada ciclo de instrucción se da solo un ciclo de reloj. Cada ciclo debe contener cuatro etapas: buscar, decodificar, ejecutar y guardar.
** CISC: complex instruction set computer
CISC es un sistema de instrucciones desarrollado por Intel que requieren de mucho tiempo para ser ejecutadas completamente.
Lo que sucede en CISC es que se reduce la cantidad de instrucciones de un software y se ignora el número de ciclos por instrucción. Se especializa en crear instrucciones complejas en el hardware, ya que el hardware siempre será mucho más rápido que el software.
* Desarrollo
Primeramente se diseñan las etapas de la arquitectura RISC, las cuales se dividen en cuatro:
1. Llamada a la instrucción
2. Decodificación de la Instrucción
3. Llamada a los operadores
4. Ejecución

Para la arquitectura 68HC11 cada instrucción ejecuta los siguientes pasos:
1. Obtener instrucción ejecutable de la memoria (bucle de recuperación)
2. Instrucciones de decodificación
3. Si la instrucción solicita leer un operando de la memoria, entonces se calcula la dirección efectiva de ese operando y los datos se leen de la memoria.
4. Si lo requiere la instrucción, los operandos requeridos se leen de los registros internos del microprocesador.
5. Ejecución, es decir, la operación se realiza en un bloque de procesamiento aritmético con operandos leídos previamente
6. Los resultados de la operación se guardan y el registro de banderas se actualiza

Se ve que los pasos son similares a los ejecutados en las cartas ASM para las instrucciones. La arquitectura segmentada 68HC11 también realiza los mismos pasos, pero se agrupará en los siguientes cuatro pasos
1. Etapa IF (instruction fetch). La instrucción a ejecutar es leída de la memoria de instrucciones
2. Etapa ID (instruction decode). Se decodifica la instrucción y se traen los operandos necesarios por la instrucción (tanto de memoria como de registros internos)
3. Etapa EX (execution). Se procesan los operandos en la UPA (unidad de procesos aritméticos)
4. Etapa WB (write back). Se guardan resultados
#+caption: Etapas para la arquitectura segmentada del 68HC11
[[./img/etapas.png]]
** Etapa 1
En esta etapa tenemos contadores, incrementadores, multiplexores y memoria de instrucciones conectados entre sí \cite[p, 133]{SAVAGE}, arrojando su salida al registro de la PC y las instrucciones que serán tomadas posteriormente por la etapa 2.
#+ATTR_LATEX: :float nil :width 0.6\linewidth
#+caption: Etapa 1 \cite[p, 133]{SAVAGE}
[[./img/e1s.png]]
#+caption: Etapa 1
[[./img/e1.png]]
** Etapa 2
Luego tenemos la etapa 2 con los bloques que se muestran en la introducción, destacando los registros internos básicos, módulos de control, sumadores y registros de acoplamiento para
poder ejecutar el pipeline, teniendo sus respectivas salidas para poder hacerlo[fn:1].
#+ATTR_LATEX: :float nil :width \linewidth
#+caption: Etapa 2 \cite[p, 135]{SAVAGE}
[[./img/e2s.png]]
#+caption: Etapa 2
[[./img/e2.png]]
** Etapa 3
Finalmente, la etapa 03[fn:2], lo cual se hace directamente para poder simularlo de una buena manera en vhdl.
Como podemos ver en esta etapa 03 tenemos la UPA y el generador de banderas, los cuales se muestran de forma independiente, cada uno con su bloque para poder controlarlo de mejor manera y poder mostrarlo en la simulación
#+ATTR_LATEX: :float nil :width \linewidth
#+caption: Etapa 3 \cite[p, 139]{SAVAGE}
[[./img/e3s.png]]
#+caption: Etapa 3
[[./img/e3.png]]
#+ATTR_LATEX: :float nil :width 0.5\linewidth
#+caption: Etapa 4
[[./img/e4.png]]

** Resolución del algoritmo
Primeramente definimos el problema, es la división entre 2 de el producto de dos números.
*** División
La división se puede simular haciendo que se recorra un bit a la derecha, por lo tanto, basándonos del set de instrucciones la instrucción perfecta es =ASRB=[fn:3] ($0057$[fn:4]) \cite[p. 24]{PM1999}, podemos implementarlo en RISC definiendo las siguientes señales de control:
#+caption: Señales de control de =ASRB= ($0057$)
|-----------+-----|
| selregr   | =5= |
| sels1     | =0= |
| sr        | =1= |
| cin       | =0= |
| sels2     | =0= |
| seldato   | =1= |
| selsrc    | =1= |
| seldir    | =0= |
| selop     | =7= |
| selresult | =1= |
| selc      | =1= |
| cadj      | =0= |
| selfalgs  | =3= |
| selbranch | =0= |
| vf        | =1= |
| selregw   | =4= |
| memw      | =0= |
| seldirw   | =0= |
|-----------+-----|
Por lo tanto, el fragmento en el archivo =u_control.vhd= seria el siguiente:
\begin{code}
\caption{\texttt{ASRB} en \texttt{u\_control.vhd}}
\inputminted[firstline=413, lastline=431]{vhdl}{../Risc/u_control.vhd}
\end{code}
*** Multiplicación
Tenemos dos opciones:, 1) realizar el módulo de multiplicación para la arquitectura en RISC y 2) realizar la multiplicación usando software. Se optó por usar software, por lo tanto definimos nuestro algoritmo en la cual nos basaremos para implementarlo en ensamblador y después pasarlo a memoria.
\begin{algorithm}
\caption{Algoritmo de multiplicación propuesto}
\KwResult{$perimetro \times apotema$}
$a \gets perimetro$\;
$b \gets apotema$\;
$suma\_auxiliar \gets a$\;
$i \gets 0$\;
\While{$i \neq b$}{
  $suma\_auxiliar \gets suma\_auxiliar \times a$\;
  $i \gets i + 1$\;
}
\end{algorithm}
Teniendo este punto resuelto buscamos que instrucciones nos pueden servir\cite[pp. 24-26]{PM1999}:
+ =LDAA=
  + Acceso Inmediato: Carga en el registro ACCA un dato inmediato de 16 bits contenido en memoria.
  + Acceso Directo: Carga en el acumulador A, un dato inmediato de 8 bits contenido en memoria.
  #+caption: LDAA
  |-----------+---------------------------+------------------|
  |           | Acceso                    | Acceso           |
  |           | Inmediato ($0086$)  | Directo ($0096$) |
  |-----------+---------------------------+------------------|
  | selregr   | =0=                       | =0=              |
  | sels1     | =0=                       | =0=              |
  | sr        | =1=                       | =1=              |
  | cin       | =0=                       | =0=              |
  | sels2     | =0=                       | =0=              |
  | seldato   | =1=                       | =1=              |
  | selsrc    | =3=                       | =2=              |
  | seldir    | =0=                       | =1=              |
  | selop     | =4=                       | =4=              |
  | selresult | =1=                       | =1=              |
  | selc      | =1=                       | =1=              |
  | cadj      | =0=                       | =0=              |
  | selfalgs  | =1=                       | =1=              |
  | selbranch | =0=                       | =0=              |
  | vf        | =1=                       | =1=              |
  | selregw   | =1=                       | =1=              |
  | memw      | =0=                       | =0=              |
  | seldirw   | =0=                       | =0=              |
  |-----------+---------------------------+------------------|
\begin{code}
\caption{\texttt{LDAA} de acceso inmediato en \texttt{u\_control.vhd}}
\inputminted[firstline=53, lastline=71]{vhdl}{../Risc/u_control.vhd}
\end{code}
\begin{code}
\caption{\texttt{LDAA} de acceso directo en \texttt{u\_control.vhd}}
\inputminted[firstline=93, lastline=111]{vhdl}{../Risc/u_control.vhd}
\end{code}
+ =STAA=
  Suma los contenidos de los registros acumuladores A y B. El resultado es guardado en el acumulador A.
  #+caption: =STAA= ($00B7$)
  |-----------+-----|
  | selregr   | =4= |
  | sels1     | =1= |
  | sr        | =1= |
  | cin       | =0= |
  | sels2     | =0= |
  | seldato   | =1= |
  | selsrc    | =1= |
  | seldir    | =0= |
  | selop     | =4= |
  | selresult | =1= |
  | selc      | =1= |
  | cadj      | =0= |
  | selfalgs  | =1= |
  | selbranch | =0= |
  | vf        | =1= |
  | selregw   | =0= |
  | memw      | =1= |
  | seldirw   | =2= |
  |-----------+-----|
\begin{code}
\caption{\texttt{STAA} en \texttt{u\_control.vhd}}
\inputminted[firstline=133, lastline=151]{vhdl}{../Risc/u_control.vhd}
\end{code}
+ =LDAB=
  + Acceso Inmediato: Carga en el registro ACCB un dato inmediato de 16 bits contenido en memoria.
  + Acceso Directo: Carga en el acumulador B, un dato inmediato de 8 bits contenido en memoria.
  #+CAPTION: =LDAB=
  |-----------+--------------------+------------------|
  |           | Acceso             | Acceso           |
  |           | Inmediato ($00C6$) | Directo ($00D6$) |
  |-----------+--------------------+------------------|
  | selregr   | =0=                | =0=              |
  | sels1     | =0=                | =0=              |
  | sr        | =1=                | =1=              |
  | cin       | =0=                | =0=              |
  | sels2     | =0=                | =0=              |
  | seldato   | =1=                | =1=              |
  | selsrc    | =3=                | =2=              |
  | seldir    | =0=                | =1=              |
  | selop     | =4=                | =4=              |
  | selresult | =1=                | =1=              |
  | selc      | =1=                | =1=              |
  | cadj      | =0=                | =0=              |
  | selfalgs  | =1=                | =1=              |
  | selbranch | =0=                | =0=              |
  | vf        | =1=                | =1=              |
  | selregw   | =4=                | =4=              |
  | memw      | =0=                | =0=              |
  | seldirw   | =0=                | =0=              |
  |-----------+--------------------+------------------|
  \begin{code}
  \caption{\texttt{LDAB} de acceso inmediato en \texttt{u\_control.vhd}}
  \inputminted[firstline=73, lastline=91]{vhdl}{../Risc/u_control.vhd}
  \end{code}
  \begin{code}
  \caption{\texttt{LDAB} de acceso directo en \texttt{u\_control.vhd}}
  \inputminted[firstline=113, lastline=131]{vhdl}{../Risc/u_control.vhd}
  \end{code}
+ =CBA= ($0011$)
  Suma el acumulador A más el acumulador B y lo almacena en el acumulador A.
  #+caption: =CBA=
  |-----------+-----|
  | selregr   | =1= |
  | sels1     | =0= |
  | sr        | =1= |
  | cin       | =0= |
  | sels2     | =0= |
  | seldato   | =1= |
  | selsrc    | =1= |
  | seldir    | =0= |
  | selop     | =2= |
  | selresult | =0= |
  | selc      | =1= |
  | cadj      | =1= |
  | selfalgs  | =3= |
  | selbranch | =0= |
  | vf        | =1= |
  | selregw   | =0= |
  | memw      | =0= |
  | seldirw   | =0= |
  |-----------+-----|
  \begin{code}
  \caption{\texttt{CBA} en \texttt{u\_control.vhd}}
  \inputminted[firstline=233, lastline=251]{vhdl}{../Risc/u_control.vhd}
  \end{code}
+ =JMP= ($007E$)
  Salta a una instrucción de la memoria.
  #+caption: =JMP=
  |-----------+-------|
  | selregr   | =126= |
  | sels1     | =0=   |
  | sr        | =0=   |
  | cin       | =0=   |
  | sels2     | =1=   |
  | seldato   | =1=   |
  | selsrc    | =3=   |
  | seldir    | =0=   |
  | selop     | =4=   |
  | selresult | =1=   |
  | selc      | =0=   |
  | cadj      | =0=   |
  | selfalgs  | =0=   |
  | selbranch | =0=   |
  | vf        | =0=   |
  | selregw   | =0=   |
  | memw      | =0=   |
  | seldirw   | =0=   |
  |-----------+-------|
  \begin{code}
  \caption{\texttt{CBA} en \texttt{u\_control.vhd}}
  \inputminted[firstline=253, lastline=271]{vhdl}{../Risc/u_control.vhd}
  \end{code}

\begin{code}
\caption{Pseudocódigo ensamblador que nos auxiliara para implementarlo en la memoria, se usa como entradas 6 y 8}
\begin{minted}[linenos,numbersep=1pt]{GAS}
ldaa 6 ; Valor de entrada A
staa 2
ldaa 8 ; Valor de entrada B
staa 3

ldaa 0 ; iterador
staa 0

ldaa 2 ; Auxiliar
staa 4

ldab 3 ; B

cba ; Si ACCB es diferente a ACCA, salta la siguiente instrucción, si no, se va a la instrucción 28
jmp 28

ldaa 4
ldab 2
aba
ldab 3
ldaa 4
ldaa 0
inca

staa 0
jmp 12

ldab 4
acrb
\end{minted}
\end{code}

Teniendo el código ensamblador de referencia escribimos en memoria (=memoria_inst.vhd=).
\begin{code}
\caption{\texttt{memoria\_inst.vhd}}
\inputminted{vhdl}{../Risc/memoria_inst.vhd}
\end{code}

Se añadieron instrucciónes =NOP= para resolver el problema de la dependencia de datos, evitando así diversos retrasos e inconsistencias.

* Resultado
Ahora seguimos las instrucciónes de la sección \ref{sec:uso} para ejecutar el algoritmo implementado en una arquitectura RISC.
#+caption: Resultados
[[../img/7.png]]
* Conclusiones
*** Castelan Hernandez Mario
Se logró cumplir el objetivo, ya que implementamos las instrucciones necesarias para ejecutar el algoritmo del área de un octágono en una arquitectura RISC que desarrollamos en el laboratorio, además pusimos en práctica los conocimientos adquiridos durante el semestre para poder entender como funciona esta arquitectura y poder desarrollar el programa en ensamblador que realiza el algoritmo
*** Romero Andrade Cristian
Se desarrolló la arquitectura Risc, donde se puede observar que la ejecución de cada instrucción es paralela, esto conlleva a una velocidad de procesamiento considerable en comparación a otras arquitecturas. sin embargo esta contiene un problema ya que tiene una dependencia de datos para cada instrucción y puede causar retrasos e inconsistencias, sin embargo esta se puede solucionar usando la operación NOP (el la práctica estas interrupciones se encarga el compilador o bien ya esta resuelta por hardware).
* Manual de usuario
** Prerrequisitos
+ Contar con Git instalado en su sistema operativo (Opcional)
+ Contar con alguno de los siguiente sistemas operativos:
  + Windows* 10
  + Windows Server* 2012 Enterprise
  + Windows Server* 2016 Enterprise
  + Windows Server* 2019 Enterprise
  + Red Hat* Enterprise Linux* 7
  + Red Hat* Enterprise Linux* 8
  + CentOS* 7.5
  + CentOS* 8.0
  + SUSE* SLE 12
  + SUSE* SLE 15
  + Ubuntu* 16.04 LTS
  + Ubuntu* 18.04 LTS
  + Ubuntu* 20 LTS
+ El tamaño de memoria dependerá de la versión descargada
  #+caption: Versiónes de Quartus
  |--------------------------------------+----------------|
  | Software                             | Espacio minimo |
  |--------------------------------------+----------------|
  | Quartus Prime Pro                    | $20-140[GB]$   |
  | Quartus Prime Standard Edition       | $15-37[GB]$    |
  | Quartus Prime Lite Edition           | $14[GB]$       |
  | Stand-Alone Programmer               | $3.3[GB]$      |
  | Intel FPGASDK for OpenCL             | $2[GB]$        |
  | Intel SoC Embedded Development Suite | $8[GB]$        |
  | Intel Advanced Link Analyzer         | $9[GB]$        |
  |--------------------------------------+----------------|
** Instalación<<sec:instalacion>>
Descargar o clonar el repositorio de [[https://github.com/tysyak/OyAC_Proyecto_20221][Github]]: [[https://github.com/tysyak/OyAC_Proyecto_20221][=github.com/tysyak/OyAC_Proyecto_20221=]]
#+caption: Repositorio del proyecto
[[./img/github.png]]
** Uso<<sec:uso>>
1. Abrir Quartus Prime[fn:5]
2. En el menú File seleccionar abrir proyecto o presionar =Control + J=
   #+ATTR_LATEX: :float nil :width 0.6\linewidth
   [[../img/1.png]]
3. Seleccionamos el proyecto (=pipeline.qpf=)
   #+ATTR_LATEX: :float nil :width 0.6\linewidth
   [[../img/2.png]]
4. Compilar el proyecto con el botón o presionando =Control + L=
   #+ATTR_LATEX: :float nil :width 0.6\linewidth
   [[./img/comp.png]]
5. Crear un nuevo archivo
   #+ATTR_LATEX: :float nil :width 0.6\linewidth
   [[./img/new1.png]]
6. Seleccionar el tipo, /University Program VWF/
   #+ATTR_LATEX: :float nil :width 0.6\linewidth
   [[./img/new2.png]]
7. Presionar click derecho sobre el espacio blanco y seleccionar insert Node or Bus
   #+ATTR_LATEX: :float nil :width 0.6\linewidth
   [[./img/sim1.png]]
8. Seleccionar Node Finder
   #+ATTR_LATEX: :float nil :width 0.6\linewidth
   [[./img/sim2.png]]
9. Presionar el botón List, esto desplegara los nodos en el proyecto
   #+ATTR_LATEX: :float nil :width 0.6\linewidth
   [[./img/sim3.png]]
10. Dar click sobre el botón $>>$ y después dar click en el botón *OK*
    #+ATTR_LATEX: :float nil :width 0.6\linewidth
    [[./img/sim4.png]]
11. Dar click en el botón *OK*
    #+ATTR_LATEX: :float nil :width 0.6\linewidth
    [[./img/sim5.png]]
12. Seleccionar el RELOJ y dar click sobre el botón 'Overwrite Clock', mostrado en la parte superior de la imagen
    #+ATTR_LATEX: :float nil :width 0.6\linewidth
    [[./img/sim6.png]]
13. Asignar un periodo de 5.0 y dar click sobre 'OK'.
14. Seleccionar RESET y dar click sobre el botón 'Forcing High (1)', mostrado en la parte superior de la imagen
    #+ATTR_LATEX: :float nil :width 0.6\linewidth
    [[./img/sim7.png]]
15. Seleccionar del menú /Simulation Settings/
    #+ATTR_LATEX: :float nil :width 0.6\linewidth
    [[./img/sim8.png]]
16. Borrar del Script la opción =-novopt= (se muestra seleccionado en la imagen siguiente). Después presionar sobre SAVE
    #+ATTR_LATEX: :float nil :width 0.6\linewidth
    [[./img/sim9.png]]
17. Presionar el botón *Run Functional Simulation*
    #+ATTR_LATEX: :float nil :width 0.6\linewidth
    [[./img/sim10.png]]

* Referencias
\nocite{*}
#+latex: \printbibliography{}

#+latex: \listoffigures{}
#+latex: \listoftables{}
#+latex: \listoflistings{}

* Footnotes

[fn:5]A partir Quartus v21.1 modelsim es sustituido, por lo tanto la solución en la simulación vista en el presente solo sirve para versiones anteriores a 21.1

[fn:4]Instrucción.

[fn:3]Notación Mnemónico.

[fn:2]Ya que la etapa 04 es solo una salida o las banderas que se activan durante todo el proceso

[fn:1]Se recomienda apreciar la arquitectura en Quartus descargando el proyecto como se explica en la [[sec:instalacion][seccion instalación]].
